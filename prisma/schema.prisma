generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  channels Channel[]

  members   Member[]
  servers   Server[]
}

model Server {
  id         String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  imageUrl   String
  inviteCode String   @unique
  profileId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  channels   Channel?
  members    Member[]
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Member {
  id                     String          @id @default(uuid())
  role                   MemberRole      @default(GUEST)
  profileId         String
  serverId               String          @db.Uuid
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")
  directMessages         DirectMessage[]
  profile                Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server                 Server          @relation(fields: [serverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages               Message[]

  @@index([profileId])
  @@index([serverId])
}

model Channel {
  id            String      @id @default(uuid())
  name          String
  type          ChannelType @default(TEXT)
  profileId String

  serverId      String      @unique @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server        Server      @relation(fields: [serverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages      Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  fileUrl   String?
  memberId  String
  channelId String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id             String          @id @default(uuid())
  memberOneId    String
  memberTwoId    String
  memberOne      Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo      Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String
  fileUrl        String?
  memberId       String
  conversationId String
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([conversationId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}
